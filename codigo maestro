# include <stdio.h>
# include <math.h>
# include <string.h>
# include <iostream>

using namespaces std;

struct parametros{
    double alpha, beta, gamma, omega;
};
typedef struct parametros Parametros;
/** Parámetros del péndulo*/

struct estado {
    double theta, w;
};
typedef struct estado Estado;
/** El estado del péndulo queda definido
    por los valores del ángulo y la velocidad angular.
    Suponemos que vienen expresados,respectivamente, en radianes y radianes/segundo  */

struct datosSimulacion{
    double factorDeltaT, factorTCout, factorTStat, factorTSimul;
    Estado estadoInicial;
    Parametros param;
};
typedef struct datosSimulacion DatosSimulacion;

double normaliza (double theta)
{
    double n =  floor ( (theta+M_PI)/2/M_PI);
    theta -= 2*n*M_PI;

    return theta;
}

int analisis (double alpha, double theta0, double w0, double epsilon,
               double &thetaM, double &T)
{
    int k;
    double E = w0*w0/2/alpha - cos(theta0);

    if (E == 1) {
        double D = tan (normaliza(theta0)/4 + M_PI/4);

        if (D == 0) T = 10/sqrt(alpha); // Damos un valor arbitrario,
                                        //  para evitar dividir por 0 en la siguiente expresión
        else
            T = 1/sqrt(alpha) * log ( tan (0.999*M_PI/4 + M_PI/4) / D);

        if (D == 0 ||w0 < 0) thetaM = - M_PI;
        else thetaM = M_PI;
        k = 0;
    }
    else {
            double T0, r;
            if (E < 1) {
                thetaM = acos (-E);
                T0 = 2*M_PI /sqrt(alpha);
                r = sin (thetaM/2);
                k = -1;
            }
            else{
                double A = sqrt( alpha*(1+E)/2 );
                T0 = M_PI/A;
                r = sqrt(alpha)/A;
                thetaM = M_PI;
                k = 1;
            }
            long long N = (long long) ceil (log (epsilon*(1-r*r))/2/log(r));
            double suma = 1, termino=1;
            for (long long n=1; n<= N ; n++){
                termino = termino * pow ( (2*n-1)/2./n *r , 2);
                suma += termino;
            }
            T = T0 * suma;
    }

    return k;
}

Estado Runge_Kutta (Parametros param, Estado e0, double t, double deltaT){
    Estado eAux, eF;
    double divisor[] = {6,3,3,6}, f[]={0,0.5,0.5,1};
    double dTheta, dw;

    eF =  e0;
    for (int i=0; i< 4; i++) {
        eAux.theta = e0.theta + dTheta * f[i];
        eAux.w = e0.w + dw * f[i];

        dTheta = eAux.w * deltaT;
        dw = aceleracion (param, eAux, t + f[i] *deltaT) * deltaT;

        eF.theta += dTheta / divisor[i];
        eF.w += dw / divisor[i];
    }

    return eF;
}

//De aqui para abajo son los tres subalgoritmos, lo que hay por encima ya venía adjunto dentro del archivo de Tarea 4
double distancia (Estado a, Estado b){
    double x, y;
    x=(a.theta-b.theta)*(a.theta-b.theta);
    y=(a.w-b.w)*(a.w-b.w);
    return sqrt(x+y); 
}

double aceleracion (Parametros par, Estado e, double t){
    double term1, term2, term3;
    term1=alpha*sin(e.theta);
    term2=par.beta*e.w;
    term3=par.gamma*cos(par.omega*t);
    return -term1-term2+term3;
}

void evolucion (double t0, double deltaT, int n, Parametros param, Estado e0,  double &t, Estado &e_t){
    t=t0+n*deltaT;
    e_t=Runge_Kutta(param, e0, t, deltaT);
}


int main(){
/** AQUÍ VA EL PROGRAMA DE MERCEDES */

for (int i=0; i<=7; i++){ /**El 7 está al azar, hay que poner el número de sets de datos */
    /** Aquí hay que crear los ficheros outEstado y outPoincare */
    while(tsimul<tstart || distnacia(e_t,e0)>pow(10,-5)){ //Con t de e_t siendo: tstart +nT
        /**Aquí hay que escribir en los dos ficheros, además de escribir en el fichero "resumen" */
        
    }
}
    return 0;
}


